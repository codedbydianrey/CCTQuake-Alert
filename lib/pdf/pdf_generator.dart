import 'package:pdf/widgets.dart' as pw;
import 'package:pdf/pdf.dart';
import 'package:printing/printing.dart';
import 'package:intl/intl.dart';
import 'package:flutter/services.dart' show rootBundle;
import 'dart:typed_data';

Future<void> generatePdf(List<Map<String, dynamic>> earthquakeData,
    DateTime startDate, DateTime endDate) async {
  final pdf = pw.Document();

  const int rowsPerPage = 20;
  int totalPages = (earthquakeData.length / rowsPerPage).ceil();

  Uint8List? headerImage;
  Uint8List? RightImage1;
  Uint8List? RightImage2;

  // Load images once and cache them
  Future<Uint8List?> loadImage(String path) async {
    try {
      return await rootBundle
          .load(path)
          .then((value) => value.buffer.asUint8List());
    } catch (e) {
      print('Failed to load image $path: $e');
      return null;
    }
  }

  headerImage = await loadImage('images/logo.png');
  RightImage1 = await loadImage('images/cct.png');
  RightImage2 = await loadImage('images/scs.png');

  for (int pageIndex = 0; pageIndex < totalPages; pageIndex++) {
    final startRow = pageIndex * rowsPerPage;
    final endRow = startRow + rowsPerPage;
    final pageData = earthquakeData.sublist(startRow,
        endRow > earthquakeData.length ? earthquakeData.length : endRow);

    pdf.addPage(
      pw.Page(
        build: (pw.Context context) {
          final pageWidth = context.page.pageFormat.width;
          final pageHeight = context.page.pageFormat.height;
          final isSmallPage = pageWidth < 500 || pageHeight < 700;

          return pw.Stack(
            children: [
              if (headerImage != null)
                pw.Positioned(
                  top: 0,
                  left: 0,
                  right: 0,
                  child: pw.SizedBox(
                    height: isSmallPage ? 50 : 70,
                    child: pw.Image(pw.MemoryImage(headerImage)),
                  ),
                ),
              pw.Positioned(
                top: 0,
                right: 0,
                child: pw.Row(
                  mainAxisAlignment: pw.MainAxisAlignment.end,
                  children: [
                    if (RightImage1 != null)
                      pw.SizedBox(
                        width: isSmallPage ? 30 : 45,
                        child: pw.Image(pw.MemoryImage(RightImage1)),
                      ),
                    pw.SizedBox(width: 10),
                    if (RightImage2 != null)
                      pw.SizedBox(
                        width: isSmallPage ? 30 : 45,
                        child: pw.Image(pw.MemoryImage(RightImage2)),
                      ),
                  ],
                ),
              ),
              pw.Column(
                children: [
                  pw.SizedBox(
                      height: isSmallPage
                          ? 5
                          : 10),
                  pw.Text('Earthquake Report',
                      style: pw.TextStyle(
                          fontSize: isSmallPage ? 18 : 24,
                          fontWeight: pw.FontWeight.bold)),
                  pw.SizedBox(height: isSmallPage ? 5 : 10),
                  pw.Text(
                      'Date Range: ${DateFormat('dd/MM/yyyy').format(startDate)} - ${DateFormat('dd/MM/yyyy').format(endDate)}',
                      style: pw.TextStyle(fontSize: isSmallPage ? 12 : 16)),
                  pw.SizedBox(height: isSmallPage ? 5 : 10),
                  pw.Text('Total Records: ${earthquakeData.length}',
                      style: pw.TextStyle(fontSize: isSmallPage ? 12 : 16)),
                  pw.SizedBox(height: isSmallPage ? 10 : 20),
                  pw.Table.fromTextArray(
                    headers: ['Date', 'Time', 'Intensity', 'Peis Value'],
                    data: pageData.map((data) {
                      return [
                        DateFormat('dd/MM/yyyy').format(data['date']),
                        data['time'] ?? 'N/A',
                        data['intensity'] ?? 'N/A',
                        data['peis'] ?? 'N/A',
                      ];
                    }).toList(),
                  ),
                  pw.SizedBox(height: isSmallPage ? 10 : 20),
                  pw.Text('Page ${pageIndex + 1} of $totalPages',
                      style: pw.TextStyle(fontSize: isSmallPage ? 10 : 12)),
                  pw.Spacer(),
                  pw.Divider(),
                  pw.Text('Generated by CCTQuake Alert',
                      style: pw.TextStyle(fontSize: isSmallPage ? 10 : 12)),
                ],
              ),
            ],
          );
        },
      ),
    );
  }

  await Printing.layoutPdf(
    onLayout: (PdfPageFormat format) async => pdf.save(),
  );
}
